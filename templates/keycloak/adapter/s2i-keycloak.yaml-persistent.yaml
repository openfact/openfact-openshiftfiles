apiVersion: v1
kind: Template
labels:
  template: s2i-wildfly-keycloak-adapter
metadata:
  annotations:
    description: Application template for s2i-wildfly-keycloak-adapter
    iconClass: icon-java
    tags: s2i,keycloak,sso,java,wildfly,jboss
    version: 1.0.0.Final
    openshift.io/display-name: s2i-wildfly-keycloak-adapter
  name: s2i-wildfly-keycloak-adapter
message: A new ${APPLICATION_NAME} has been created in your project
objects:
  - kind: Route
    apiVersion: v1
    metadata:
      labels:
        app: ${APPLICATION_NAME}
        group: org.keycloak
      name: ${APPLICATION_NAME}
    spec:
      to:
        kind: Service
        name: ${APPLICATION_NAME}
  - kind: Service
    apiVersion: v1
    metadata:
      labels:
        app: ${APPLICATION_NAME}
        group: org.keycloak
      name: ${APPLICATION_NAME}
      annotations:
        service.alpha.openshift.io/dependencies: "[{\"name\": \"${DATABASE_SERVICE_NAME}\", \"kind\": \"Service\"}]"
    spec:
      ports:
        - name: 8080-tcp
          port: 8080
          protocol: TCP
          targetPort: 8080
      selector:
        deploymentconfig: ${APPLICATION_NAME}
  - kind: Service
    apiVersion: v1
    metadata:
      labels:
        app: ${DATABASE_SERVICE_NAME}
        group: org.keycloak
      name: ${DATABASE_SERVICE_NAME}
    spec:
      ports:
        - name: 5432-tcp
          port: 5432
          protocol: TCP
          targetPort: 5432
      selector:
        deploymentconfig: ${DATABASE_SERVICE_NAME}
      type: ClusterIP
      sessionAffinity: None
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
        group: org.keycloak
    spec:
      strategy:
        type: Rolling
        rollingParams:
          timeoutSeconds: 10800
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
            - ${APPLICATION_NAME}
            from:
              kind: ImageStreamTag
              name: ${APPLICATION_NAME}:latest
      replicas: 1
      selector:
        app: ${APPLICATION_NAME}
        deploymentconfig: ${APPLICATION_NAME}
      template:
        metadata:
          name: ${APPLICATION_NAME}
          labels:
            app: ${APPLICATION_NAME}
            group: org.keycloak
            deploymentconfig: ${APPLICATION_NAME}
        spec:
          containers:
            - name: ${APPLICATION_NAME}
              image: ${APPLICATION_NAME}
              imagePullPolicy: Always
              lifecycle:
                preStop:
                  exec:
                    command:
                    - "/wildfly/bin/jboss-cli.sh"
                    - "-c"
                    - ":shutdown(timeout=60)"
              ports:
                - name: 8080-tcp
                  containerPort: 8080
                  protocol: TCP
              env:
                - name: KEYCLOAK_SECURE_DEPLOYMENT
                  value: ${KEYCLOAK_SECURE_DEPLOYMENT}  
                - name: KEYCLOAK_AUTH_SERVER_URL
                  value: ${KEYCLOAK_AUTH_SERVER_URL}
                - name: KEYCLOAK_REALM
                  value: ${KEYCLOAK_REALM}
                - name: KEYCLOAK_RESOURCE
                  value: ${KEYCLOAK_RESOURCE}
                - name: KEYCLOAK_BEARER_ONLY
                  value: ${KEYCLOAK_BEARER_ONLY}
                - name: KEYCLOAK_SSL_REQUIRED
                  value: ${KEYCLOAK_SSL_REQUIRED}
                - name: KEYCLOAK_USE_RESOURCE_ROLE_MAPPINGS
                  value: ${KEYCLOAK_USE_RESOURCE_ROLE_MAPPINGS}
                - name: KEYCLOAK_INITIAL_ACCESS_TOKEN
                  valueFrom:
                    secretKeyRef:
                      name: ${APPLICATION_NAME}
                      key: access-token
                - name: POSTGRESQL_DATASOURCE
                  value: ${POSTGRESQL_DATASOURCE}
                - name: POSTGRESQL_SERVICE_HOST 
                  value: ${DATABASE_SERVICE_NAME}
                - name: POSTGRESQL_SERVICE_PORT
                  value: "5432"
                - name: POSTGRESQL_DATABASE
                  value: ${DB_DATABASE}
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${DATABASE_SERVICE_NAME}
                      key: database-user
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${DATABASE_SERVICE_NAME}
                      key: database-password
          terminationGracePeriodSeconds: 75
          restartPolicy: Always
  - kind: DeploymentConfig
    apiVersion: v1
    metadata:
      name: ${DATABASE_SERVICE_NAME}
      labels:
        app: ${DATABASE_SERVICE_NAME}
        group: org.keycloak
    spec:
      strategy:
        type: Recreate
      triggers:
        - type: ConfigChange
        - type: ImageChange
          imageChangeParams:
            automatic: true
            containerNames:
            - ${DATABASE_SERVICE_NAME}
            from:
              kind: ImageStreamTag
              name: postgresql:${POSTGRESQL_VERSION}
              namespace: ${NAMESPACE}  
      replicas: 1
      selector:
        app: ${DATABASE_SERVICE_NAME}
        deploymentconfig: ${DATABASE_SERVICE_NAME}
      template:
        metadata:
          name: ${DATABASE_SERVICE_NAME}
          labels:
            app: ${DATABASE_SERVICE_NAME}
            group: org.keycloak
            deploymentconfig: ${DATABASE_SERVICE_NAME}
        spec:
          terminationGracePeriodSeconds: 60
          restartPolicy: Always
          dnsPolicy: ClusterFirst
          containers:
            - name: ${DATABASE_SERVICE_NAME}
              image: postgresql
              imagePullPolicy: IfNotPresent
              ports:
                - containerPort: 5432
                  protocol: TCP
              readinessProbe:
                timeoutSeconds: 1
                initialDelaySeconds: 5
                exec:
                  command:
                    - "/bin/sh"
                    - "-i"
                    - "-c"
                    - "psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'"
              livenessProbe:
                timeoutSeconds: 1
                initialDelaySeconds: 30
                tcpSocket:
                  port: 5432
              volumeMounts:
                - mountPath: /var/lib/pgsql/data
                  name: ${DATABASE_SERVICE_NAME}-pvol
              env:
                - name: POSTGRESQL_DATABASE
                  value: ${DB_DATABASE}
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      name: ${DATABASE_SERVICE_NAME}
                      key: database-user
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: ${DATABASE_SERVICE_NAME}
                      key: database-password
              terminationMessagePath: /dev/termination-log          
              securityContext:            
                privileged: false
          volumes:
            - name: ${DATABASE_SERVICE_NAME}-pvol
              persistentVolumeClaim:
                claimName: ${DATABASE_SERVICE_NAME}-claim
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: wildfly-keycloak-adapter-101-centos7
      labels:
        app: ${APPLICATION_NAME}
    spec:
      tags:
        - name: latest
          annotations:
            openshift.io/imported-from: carlosthe19916/wildfly-keycloak-adapter-101-centos7
          from:
            kind: DockerImage
            name: carlosthe19916/wildfly-keycloak-adapter-101-centos7
  - kind: ImageStream
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec: {}
  - kind: BuildConfig
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
    spec:
      source:
        type: Git
        git:
          ref: ${GIT_REF}
          uri: ${GIT_URI}
      strategy:
        type: Source
        sourceStrategy:
          from:
            kind: ImageStreamTag
            name: wildfly-keycloak-adapter-101-centos7:latest
      output:
        to:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest  
      triggers:
        - type: GitHub
          github:
            secret: ${GITHUB_WEBHOOK_SECRET}
        - type: Generic
          generic:
            secret: ${GENERIC_WEBHOOK_SECRET}
        - type: ImageChange
        - type: ConfigChange
  - kind: Secret
    apiVersion: v1
    metadata:
      name: ${APPLICATION_NAME}
      labels:
        app: ${APPLICATION_NAME}
        group: org.keycloak
    stringData:
      access-token: ${KEYCLOAK_INITIAL_ACCESS_TOKEN}
  - kind: Secret
    apiVersion: v1
    metadata:
      name: ${DATABASE_SERVICE_NAME}
      labels:
        app: ${DATABASE_SERVICE_NAME}
        group: org.keycloak
    stringData:
      database-user: ${DB_USERNAME}
      database-password: ${DB_PASSWORD}
  - kind: PersistentVolumeClaim
    apiVersion: v1
    metadata:
      name: ${DATABASE_SERVICE_NAME}-claim
      labels:
        app: ${DATABASE_SERVICE_NAME}
        group: org.keycloak
    spec:
      accessModes:
        - ReadWriteOnce
      resources:
        requests:
          storage: ${VOLUME_CAPACITY}
      volumeName: ${PERSISTENT_VOLUME_NAME}
parameters:
  - description: Application Name
    displayName: Application Name
    name: APPLICATION_NAME
    value: openfact
    required: true
  - description: Git source URI for application
    displayName: Git source repository
    name: GIT_URI
    required: true
    value: https://github.com/openfact/openfact-pe.git
  - displayName: Git branch/tag reference
    name: GIT_REF
    value: master
    required: true
  - description: GitHub webhook secret
    displayName: GitHub Webhook Secret
    from: "[a-zA-Z0-9]{8}"
    generate: expression
    name: GITHUB_WEBHOOK_SECRET
    required: true
  - description: Generic webhook secret
    displayName: Generic Webhook Secret
    from: "[a-zA-Z0-9]{8}"
    generate: expression
    name: GENERIC_WEBHOOK_SECRET
    required: true
  - description: POSTGRESQL Datasource Name. If null, the default is ExampleDS
    displayName: POSTGRESQL Datasource Name
    name: POSTGRESQL_DATASOURCE
    value: OpenfactDS
    required: true
  - description: War name to be added to <secure-deployment name="mywar.war">..(e.g. ROOT.war)
    displayName: War File Name
    name: KEYCLOAK_SECURE_DEPLOYMENT
    value: ROOT
    required: true
  - description: URL of your Keycloak Server (e.g. https://mydomain.com/auth)
    displayName: Keycloak Server URL
    name: KEYCLOAK_AUTH_SERVER_URL
    required: true
  - description: Realm to be created in the Keycloak server (e.g. demo).
    displayName: Keycloak Realm
    name: KEYCLOAK_REALM
    required: true
  - description: The client-id of the application. Each application has a client-id that is used to identify the application
    displayName: Resource (Client-id)
    name: KEYCLOAK_RESOURCE
    value: openfact
    required: true
  - description: "This should be set to true for services. If enabled the adapter will not attempt to authenticate users, but only verify bearer tokens"
    displayName: "Bearer Only (bearer-only)"
    name: KEYCLOAK_BEARER_ONLY
    value: "true"
    required: true
  - description: Ensures that all communication to and from the Keycloak server is over correct HTTPS
    displayName: SSL Required. Valid values are 'all', 'external' and 'none'.
    name: KEYCLOAK_SSL_REQUIRED
    value: external
    required: true
  - description: If set to true, the adapter will look inside the token for application level role mappings for the user. If false, it will look at the realm level for user role mappings.
    displayName: Use Resource Role Mappings
    name: KEYCLOAK_USE_RESOURCE_ROLE_MAPPINGS
    value: "true"
    required: true
  - description: An initial access token can to be used to create a client on the realm you specified.
    displayName: Keycloak Initial Access Token
    name: KEYCLOAK_INITIAL_ACCESS_TOKEN
    required: false
  - displayName: Database Service Name
    name: DATABASE_SERVICE_NAME
    value: openfact-postgresql
    required: true
  - displayName: Database Volume Capacity
    description: Size of persistent storage for database volume.
    name: VOLUME_CAPACITY
    value: "512Mi"
    required: true
  - displayName: ImageStream Namespace
    description: Namespace in which the ImageStreams for Red Hat Middleware images are installed. These ImageStreams are normally installed in the openshift namespace. You should only need to modify this if you've installed the ImageStreams in a different namespace/project.
    name: NAMESPACE
    value: openshift
    required: true
  - displayName: PostgreSQL Image Version
    description: The version of the PostgreSQL image
    name: POSTGRESQL_VERSION
    value: "9.5"
    required: true
  - displayName: Database Name
    description: Database name
    name: DB_DATABASE
    value: openfact
    required: true
  - displayName: Database Username
    description: Database user name
    name: DB_USERNAME
    from: "user[a-zA-Z0-9]{3}"
    generate: expression
    required: true
  - displayName: Database Password
    description: Database user password
    name: DB_PASSWORD
    from: "user[a-zA-Z0-9]{3}"
    generate: expression
    required: true
  - displayName: Persistent Volume Name
    description: Persistent Volume Name
    name: PERSISTENT_VOLUME_NAME  
    required: false
